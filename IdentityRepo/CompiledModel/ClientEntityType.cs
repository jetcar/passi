// <auto-generated />
using System;
using System.Reflection;
using IdentityServer4.EntityFramework.Entities;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace IdentityServer.CompiledModel
{
    internal partial class ClientEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "IdentityServer4.EntityFramework.Entities.Client",
                typeof(Client),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            var absoluteRefreshTokenLifetime = runtimeEntityType.AddProperty(
                "AbsoluteRefreshTokenLifetime",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("AbsoluteRefreshTokenLifetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AbsoluteRefreshTokenLifetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var accessTokenLifetime = runtimeEntityType.AddProperty(
                "AccessTokenLifetime",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("AccessTokenLifetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AccessTokenLifetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var accessTokenType = runtimeEntityType.AddProperty(
                "AccessTokenType",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("AccessTokenType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AccessTokenType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var allowAccessTokensViaBrowser = runtimeEntityType.AddProperty(
                "AllowAccessTokensViaBrowser",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("AllowAccessTokensViaBrowser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AllowAccessTokensViaBrowser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var allowOfflineAccess = runtimeEntityType.AddProperty(
                "AllowOfflineAccess",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("AllowOfflineAccess", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AllowOfflineAccess>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var allowPlainTextPkce = runtimeEntityType.AddProperty(
                "AllowPlainTextPkce",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("AllowPlainTextPkce", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AllowPlainTextPkce>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var allowRememberConsent = runtimeEntityType.AddProperty(
                "AllowRememberConsent",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("AllowRememberConsent", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AllowRememberConsent>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var allowedIdentityTokenSigningAlgorithms = runtimeEntityType.AddProperty(
                "AllowedIdentityTokenSigningAlgorithms",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("AllowedIdentityTokenSigningAlgorithms", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AllowedIdentityTokenSigningAlgorithms>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var alwaysIncludeUserClaimsInIdToken = runtimeEntityType.AddProperty(
                "AlwaysIncludeUserClaimsInIdToken",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("AlwaysIncludeUserClaimsInIdToken", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AlwaysIncludeUserClaimsInIdToken>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var alwaysSendClientClaims = runtimeEntityType.AddProperty(
                "AlwaysSendClientClaims",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("AlwaysSendClientClaims", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AlwaysSendClientClaims>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var authorizationCodeLifetime = runtimeEntityType.AddProperty(
                "AuthorizationCodeLifetime",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("AuthorizationCodeLifetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<AuthorizationCodeLifetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var backChannelLogoutSessionRequired = runtimeEntityType.AddProperty(
                "BackChannelLogoutSessionRequired",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("BackChannelLogoutSessionRequired", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<BackChannelLogoutSessionRequired>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var backChannelLogoutUri = runtimeEntityType.AddProperty(
                "BackChannelLogoutUri",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("BackChannelLogoutUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<BackChannelLogoutUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var clientClaimsPrefix = runtimeEntityType.AddProperty(
                "ClientClaimsPrefix",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("ClientClaimsPrefix", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<ClientClaimsPrefix>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var clientId = runtimeEntityType.AddProperty(
                "ClientId",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("ClientId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<ClientId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var clientName = runtimeEntityType.AddProperty(
                "ClientName",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("ClientName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<ClientName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var clientUri = runtimeEntityType.AddProperty(
                "ClientUri",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("ClientUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<ClientUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var consentLifetime = runtimeEntityType.AddProperty(
                "ConsentLifetime",
                typeof(int?),
                propertyInfo: typeof(Client).GetProperty("ConsentLifetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<ConsentLifetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var created = runtimeEntityType.AddProperty(
                "Created",
                typeof(DateTime),
                propertyInfo: typeof(Client).GetProperty("Created", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<Created>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var deviceCodeLifetime = runtimeEntityType.AddProperty(
                "DeviceCodeLifetime",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("DeviceCodeLifetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<DeviceCodeLifetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var enableLocalLogin = runtimeEntityType.AddProperty(
                "EnableLocalLogin",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("EnableLocalLogin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<EnableLocalLogin>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var enabled = runtimeEntityType.AddProperty(
                "Enabled",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("Enabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<Enabled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var frontChannelLogoutSessionRequired = runtimeEntityType.AddProperty(
                "FrontChannelLogoutSessionRequired",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("FrontChannelLogoutSessionRequired", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<FrontChannelLogoutSessionRequired>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var frontChannelLogoutUri = runtimeEntityType.AddProperty(
                "FrontChannelLogoutUri",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("FrontChannelLogoutUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<FrontChannelLogoutUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var identityTokenLifetime = runtimeEntityType.AddProperty(
                "IdentityTokenLifetime",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("IdentityTokenLifetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<IdentityTokenLifetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var includeJwtId = runtimeEntityType.AddProperty(
                "IncludeJwtId",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("IncludeJwtId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<IncludeJwtId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var lastAccessed = runtimeEntityType.AddProperty(
                "LastAccessed",
                typeof(DateTime?),
                propertyInfo: typeof(Client).GetProperty("LastAccessed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<LastAccessed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var logoUri = runtimeEntityType.AddProperty(
                "LogoUri",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("LogoUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<LogoUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var nonEditable = runtimeEntityType.AddProperty(
                "NonEditable",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("NonEditable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<NonEditable>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var pairWiseSubjectSalt = runtimeEntityType.AddProperty(
                "PairWiseSubjectSalt",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("PairWiseSubjectSalt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<PairWiseSubjectSalt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var protocolType = runtimeEntityType.AddProperty(
                "ProtocolType",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("ProtocolType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<ProtocolType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var refreshTokenExpiration = runtimeEntityType.AddProperty(
                "RefreshTokenExpiration",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("RefreshTokenExpiration", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<RefreshTokenExpiration>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var refreshTokenUsage = runtimeEntityType.AddProperty(
                "RefreshTokenUsage",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("RefreshTokenUsage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<RefreshTokenUsage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requireClientSecret = runtimeEntityType.AddProperty(
                "RequireClientSecret",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("RequireClientSecret", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<RequireClientSecret>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requireConsent = runtimeEntityType.AddProperty(
                "RequireConsent",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("RequireConsent", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<RequireConsent>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requirePkce = runtimeEntityType.AddProperty(
                "RequirePkce",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("RequirePkce", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<RequirePkce>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requireRequestObject = runtimeEntityType.AddProperty(
                "RequireRequestObject",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("RequireRequestObject", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<RequireRequestObject>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var slidingRefreshTokenLifetime = runtimeEntityType.AddProperty(
                "SlidingRefreshTokenLifetime",
                typeof(int),
                propertyInfo: typeof(Client).GetProperty("SlidingRefreshTokenLifetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<SlidingRefreshTokenLifetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var updateAccessTokenClaimsOnRefresh = runtimeEntityType.AddProperty(
                "UpdateAccessTokenClaimsOnRefresh",
                typeof(bool),
                propertyInfo: typeof(Client).GetProperty("UpdateAccessTokenClaimsOnRefresh", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<UpdateAccessTokenClaimsOnRefresh>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var updated = runtimeEntityType.AddProperty(
                "Updated",
                typeof(DateTime?),
                propertyInfo: typeof(Client).GetProperty("Updated", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<Updated>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var userCodeType = runtimeEntityType.AddProperty(
                "UserCodeType",
                typeof(string),
                propertyInfo: typeof(Client).GetProperty("UserCodeType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<UserCodeType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var userSsoLifetime = runtimeEntityType.AddProperty(
                "UserSsoLifetime",
                typeof(int?),
                propertyInfo: typeof(Client).GetProperty("UserSsoLifetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Client).GetField("<UserSsoLifetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Clients");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
