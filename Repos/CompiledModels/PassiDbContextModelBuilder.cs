// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Repos.CompiledModels
{
    public partial class PassiDbContextModel
    {
        partial void Initialize()
        {
            var dataProtectionKey = DataProtectionKeyEntityType.Create(this);
            var adminDb = AdminDbEntityType.Create(this);
            var certificateDb = CertificateDbEntityType.Create(this);
            var deviceDb = DeviceDbEntityType.Create(this);
            var simpleSessionDb = SimpleSessionDbEntityType.Create(this);
            var userDb = UserDbEntityType.Create(this);
            var userInvitationDb = UserInvitationDbEntityType.Create(this);

            CertificateDbEntityType.CreateForeignKey1(certificateDb, userDb);
            CertificateDbEntityType.CreateForeignKey2(certificateDb, certificateDb);
            CertificateDbEntityType.CreateForeignKey3(certificateDb, userDb);
            DeviceDbEntityType.CreateForeignKey1(deviceDb, userDb);
            SimpleSessionDbEntityType.CreateForeignKey1(simpleSessionDb, userDb);
            SimpleSessionDbEntityType.CreateForeignKey2(simpleSessionDb, userDb);
            UserDbEntityType.CreateForeignKey1(userDb, deviceDb);
            UserDbEntityType.CreateForeignKey2(userDb, userDb);
            UserInvitationDbEntityType.CreateForeignKey1(userInvitationDb, userDb);
            UserInvitationDbEntityType.CreateForeignKey2(userInvitationDb, userDb);

            DataProtectionKeyEntityType.CreateAnnotations(dataProtectionKey);
            AdminDbEntityType.CreateAnnotations(adminDb);
            CertificateDbEntityType.CreateAnnotations(certificateDb);
            DeviceDbEntityType.CreateAnnotations(deviceDb);
            SimpleSessionDbEntityType.CreateAnnotations(simpleSessionDb);
            UserDbEntityType.CreateAnnotations(userDb);
            UserInvitationDbEntityType.CreateAnnotations(userInvitationDb);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.1");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var dataProtectionKey = FindEntityType("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            dataProtectionKey.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase = new TableBase("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", null, relationalModel);
            var friendlyNameColumnBase = new ColumnBase<ColumnMappingBase>("FriendlyName", "text", microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase.Columns.Add("FriendlyName", friendlyNameColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase);
            microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase.Columns.Add("Id", idColumnBase);
            var xmlColumnBase = new ColumnBase<ColumnMappingBase>("Xml", "text", microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase.Columns.Add("Xml", xmlColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase);
            var microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase = new TableMappingBase<ColumnMappingBase>(dataProtectionKey, microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase, true);
            microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyTableBase.AddTypeMapping(microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase, false);
            defaultTableMappings.Add(microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, dataProtectionKey.FindProperty("Id")!, microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)friendlyNameColumnBase, dataProtectionKey.FindProperty("FriendlyName")!, microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xmlColumnBase, dataProtectionKey.FindProperty("Xml")!, microsoftAspNetCoreDataProtectionEntityFrameworkCoreDataProtectionKeyMappingBase);

            var tableMappings = new List<TableMapping>();
            dataProtectionKey.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var dataProtectionKeysTable = new Table("DataProtectionKeys", null, relationalModel);
            var idColumn = new Column("Id", "integer", dataProtectionKeysTable);
            dataProtectionKeysTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var friendlyNameColumn = new Column("FriendlyName", "text", dataProtectionKeysTable)
            {
                IsNullable = true
            };
            dataProtectionKeysTable.Columns.Add("FriendlyName", friendlyNameColumn);
            var xmlColumn = new Column("Xml", "text", dataProtectionKeysTable)
            {
                IsNullable = true
            };
            dataProtectionKeysTable.Columns.Add("Xml", xmlColumn);
            var pK_DataProtectionKeys = new UniqueConstraint("PK_DataProtectionKeys", dataProtectionKeysTable, new[] { idColumn });
            dataProtectionKeysTable.PrimaryKey = pK_DataProtectionKeys;
            var pK_DataProtectionKeysUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey",
                new[] { "Id" });
            pK_DataProtectionKeys.MappedKeys.Add(pK_DataProtectionKeysUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataProtectionKeysUc).Add(pK_DataProtectionKeys);
            dataProtectionKeysTable.UniqueConstraints.Add("PK_DataProtectionKeys", pK_DataProtectionKeys);
            relationalModel.Tables.Add(("DataProtectionKeys", null), dataProtectionKeysTable);
            var dataProtectionKeysTableMapping = new TableMapping(dataProtectionKey, dataProtectionKeysTable, true);
            dataProtectionKeysTable.AddTypeMapping(dataProtectionKeysTableMapping, false);
            tableMappings.Add(dataProtectionKeysTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, dataProtectionKey.FindProperty("Id")!, dataProtectionKeysTableMapping);
            RelationalModel.CreateColumnMapping(friendlyNameColumn, dataProtectionKey.FindProperty("FriendlyName")!, dataProtectionKeysTableMapping);
            RelationalModel.CreateColumnMapping(xmlColumn, dataProtectionKey.FindProperty("Xml")!, dataProtectionKeysTableMapping);

            var adminDb = FindEntityType("Models.AdminDb")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            adminDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var modelsAdminDbTableBase = new TableBase("Models.AdminDb", null, relationalModel);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "character varying(256)", modelsAdminDbTableBase);
            modelsAdminDbTableBase.Columns.Add("Email", emailColumnBase);
            relationalModel.DefaultTables.Add("Models.AdminDb", modelsAdminDbTableBase);
            var modelsAdminDbMappingBase = new TableMappingBase<ColumnMappingBase>(adminDb, modelsAdminDbTableBase, true);
            modelsAdminDbTableBase.AddTypeMapping(modelsAdminDbMappingBase, false);
            defaultTableMappings0.Add(modelsAdminDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, adminDb.FindProperty("Email")!, modelsAdminDbMappingBase);

            var tableMappings0 = new List<TableMapping>();
            adminDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var adminsTable = new Table("Admins", null, relationalModel);
            var emailColumn = new Column("Email", "character varying(256)", adminsTable);
            adminsTable.Columns.Add("Email", emailColumn);
            var pK_Admins = new UniqueConstraint("PK_Admins", adminsTable, new[] { emailColumn });
            adminsTable.PrimaryKey = pK_Admins;
            var pK_AdminsUc = RelationalModel.GetKey(this,
                "Models.AdminDb",
                new[] { "Email" });
            pK_Admins.MappedKeys.Add(pK_AdminsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AdminsUc).Add(pK_Admins);
            adminsTable.UniqueConstraints.Add("PK_Admins", pK_Admins);
            var iX_Admins_Email = new TableIndex(
            "IX_Admins_Email", adminsTable, new[] { emailColumn }, true);
            var iX_Admins_EmailIx = RelationalModel.GetIndex(this,
                "Models.AdminDb",
                new[] { "Email" });
            iX_Admins_Email.MappedIndexes.Add(iX_Admins_EmailIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Admins_EmailIx).Add(iX_Admins_Email);
            adminsTable.Indexes.Add("IX_Admins_Email", iX_Admins_Email);
            relationalModel.Tables.Add(("Admins", null), adminsTable);
            var adminsTableMapping = new TableMapping(adminDb, adminsTable, true);
            adminsTable.AddTypeMapping(adminsTableMapping, false);
            tableMappings0.Add(adminsTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, adminDb.FindProperty("Email")!, adminsTableMapping);

            var certificateDb = FindEntityType("Models.CertificateDb")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            certificateDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var modelsCertificateDbTableBase = new TableBase("Models.CertificateDb", null, relationalModel);
            var creationTimeColumnBase = new ColumnBase<ColumnMappingBase>("CreationTime", "timestamp with time zone", modelsCertificateDbTableBase);
            modelsCertificateDbTableBase.Columns.Add("CreationTime", creationTimeColumnBase);
            var modifiedByIdColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedById", "bigint", modelsCertificateDbTableBase)
            {
                IsNullable = true
            };
            modelsCertificateDbTableBase.Columns.Add("ModifiedById", modifiedByIdColumnBase);
            var modifiedTimeColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedTime", "timestamp with time zone", modelsCertificateDbTableBase)
            {
                IsNullable = true
            };
            modelsCertificateDbTableBase.Columns.Add("ModifiedTime", modifiedTimeColumnBase);
            var parentCertIdColumnBase = new ColumnBase<ColumnMappingBase>("ParentCertId", "character varying(256)", modelsCertificateDbTableBase)
            {
                IsNullable = true
            };
            modelsCertificateDbTableBase.Columns.Add("ParentCertId", parentCertIdColumnBase);
            var parentCertSignatureColumnBase = new ColumnBase<ColumnMappingBase>("ParentCertSignature", "character varying(1024)", modelsCertificateDbTableBase)
            {
                IsNullable = true
            };
            modelsCertificateDbTableBase.Columns.Add("ParentCertSignature", parentCertSignatureColumnBase);
            var privateCertColumnBase = new ColumnBase<ColumnMappingBase>("PrivateCert", "character varying(1024)", modelsCertificateDbTableBase)
            {
                IsNullable = true
            };
            modelsCertificateDbTableBase.Columns.Add("PrivateCert", privateCertColumnBase);
            var publicCertColumnBase = new ColumnBase<ColumnMappingBase>("PublicCert", "character varying(2048)", modelsCertificateDbTableBase)
            {
                IsNullable = true
            };
            modelsCertificateDbTableBase.Columns.Add("PublicCert", publicCertColumnBase);
            var thumbprintColumnBase = new ColumnBase<ColumnMappingBase>("Thumbprint", "character varying(256)", modelsCertificateDbTableBase);
            modelsCertificateDbTableBase.Columns.Add("Thumbprint", thumbprintColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "bigint", modelsCertificateDbTableBase);
            modelsCertificateDbTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Models.CertificateDb", modelsCertificateDbTableBase);
            var modelsCertificateDbMappingBase = new TableMappingBase<ColumnMappingBase>(certificateDb, modelsCertificateDbTableBase, true);
            modelsCertificateDbTableBase.AddTypeMapping(modelsCertificateDbMappingBase, false);
            defaultTableMappings1.Add(modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)thumbprintColumnBase, certificateDb.FindProperty("Thumbprint")!, modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationTimeColumnBase, certificateDb.FindProperty("CreationTime")!, modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByIdColumnBase, certificateDb.FindProperty("ModifiedById")!, modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedTimeColumnBase, certificateDb.FindProperty("ModifiedTime")!, modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentCertIdColumnBase, certificateDb.FindProperty("ParentCertId")!, modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentCertSignatureColumnBase, certificateDb.FindProperty("ParentCertSignature")!, modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)privateCertColumnBase, certificateDb.FindProperty("PrivateCert")!, modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publicCertColumnBase, certificateDb.FindProperty("PublicCert")!, modelsCertificateDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, certificateDb.FindProperty("UserId")!, modelsCertificateDbMappingBase);

            var tableMappings1 = new List<TableMapping>();
            certificateDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var certificatesTable = new Table("Certificates", null, relationalModel);
            var thumbprintColumn = new Column("Thumbprint", "character varying(256)", certificatesTable);
            certificatesTable.Columns.Add("Thumbprint", thumbprintColumn);
            var creationTimeColumn = new Column("CreationTime", "timestamp with time zone", certificatesTable);
            certificatesTable.Columns.Add("CreationTime", creationTimeColumn);
            var modifiedByIdColumn = new Column("ModifiedById", "bigint", certificatesTable)
            {
                IsNullable = true
            };
            certificatesTable.Columns.Add("ModifiedById", modifiedByIdColumn);
            var modifiedTimeColumn = new Column("ModifiedTime", "timestamp with time zone", certificatesTable)
            {
                IsNullable = true
            };
            certificatesTable.Columns.Add("ModifiedTime", modifiedTimeColumn);
            var parentCertIdColumn = new Column("ParentCertId", "character varying(256)", certificatesTable)
            {
                IsNullable = true
            };
            certificatesTable.Columns.Add("ParentCertId", parentCertIdColumn);
            var parentCertSignatureColumn = new Column("ParentCertSignature", "character varying(1024)", certificatesTable)
            {
                IsNullable = true
            };
            certificatesTable.Columns.Add("ParentCertSignature", parentCertSignatureColumn);
            var privateCertColumn = new Column("PrivateCert", "character varying(1024)", certificatesTable)
            {
                IsNullable = true
            };
            certificatesTable.Columns.Add("PrivateCert", privateCertColumn);
            var publicCertColumn = new Column("PublicCert", "character varying(2048)", certificatesTable)
            {
                IsNullable = true
            };
            certificatesTable.Columns.Add("PublicCert", publicCertColumn);
            var userIdColumn = new Column("UserId", "bigint", certificatesTable);
            certificatesTable.Columns.Add("UserId", userIdColumn);
            var pK_Certificates = new UniqueConstraint("PK_Certificates", certificatesTable, new[] { thumbprintColumn });
            certificatesTable.PrimaryKey = pK_Certificates;
            var pK_CertificatesUc = RelationalModel.GetKey(this,
                "Models.CertificateDb",
                new[] { "Thumbprint" });
            pK_Certificates.MappedKeys.Add(pK_CertificatesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CertificatesUc).Add(pK_Certificates);
            certificatesTable.UniqueConstraints.Add("PK_Certificates", pK_Certificates);
            var iX_Certificates_ModifiedById = new TableIndex(
            "IX_Certificates_ModifiedById", certificatesTable, new[] { modifiedByIdColumn }, false);
            var iX_Certificates_ModifiedByIdIx = RelationalModel.GetIndex(this,
                "Models.CertificateDb",
                "IX_Certificates_ModifiedById");
            iX_Certificates_ModifiedById.MappedIndexes.Add(iX_Certificates_ModifiedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Certificates_ModifiedByIdIx).Add(iX_Certificates_ModifiedById);
            certificatesTable.Indexes.Add("IX_Certificates_ModifiedById", iX_Certificates_ModifiedById);
            var iX_Certificates_ParentCertId = new TableIndex(
            "IX_Certificates_ParentCertId", certificatesTable, new[] { parentCertIdColumn }, true);
            var iX_Certificates_ParentCertIdIx = RelationalModel.GetIndex(this,
                "Models.CertificateDb",
                "IX_Certificates_ParentCertId");
            iX_Certificates_ParentCertId.MappedIndexes.Add(iX_Certificates_ParentCertIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Certificates_ParentCertIdIx).Add(iX_Certificates_ParentCertId);
            certificatesTable.Indexes.Add("IX_Certificates_ParentCertId", iX_Certificates_ParentCertId);
            var iX_Certificates_UserId = new TableIndex(
            "IX_Certificates_UserId", certificatesTable, new[] { userIdColumn }, false);
            var iX_Certificates_UserIdIx = RelationalModel.GetIndex(this,
                "Models.CertificateDb",
                "IX_Certificates_UserId");
            iX_Certificates_UserId.MappedIndexes.Add(iX_Certificates_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Certificates_UserIdIx).Add(iX_Certificates_UserId);
            certificatesTable.Indexes.Add("IX_Certificates_UserId", iX_Certificates_UserId);
            relationalModel.Tables.Add(("Certificates", null), certificatesTable);
            var certificatesTableMapping = new TableMapping(certificateDb, certificatesTable, true);
            certificatesTable.AddTypeMapping(certificatesTableMapping, false);
            tableMappings1.Add(certificatesTableMapping);
            RelationalModel.CreateColumnMapping(thumbprintColumn, certificateDb.FindProperty("Thumbprint")!, certificatesTableMapping);
            RelationalModel.CreateColumnMapping(creationTimeColumn, certificateDb.FindProperty("CreationTime")!, certificatesTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByIdColumn, certificateDb.FindProperty("ModifiedById")!, certificatesTableMapping);
            RelationalModel.CreateColumnMapping(modifiedTimeColumn, certificateDb.FindProperty("ModifiedTime")!, certificatesTableMapping);
            RelationalModel.CreateColumnMapping(parentCertIdColumn, certificateDb.FindProperty("ParentCertId")!, certificatesTableMapping);
            RelationalModel.CreateColumnMapping(parentCertSignatureColumn, certificateDb.FindProperty("ParentCertSignature")!, certificatesTableMapping);
            RelationalModel.CreateColumnMapping(privateCertColumn, certificateDb.FindProperty("PrivateCert")!, certificatesTableMapping);
            RelationalModel.CreateColumnMapping(publicCertColumn, certificateDb.FindProperty("PublicCert")!, certificatesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, certificateDb.FindProperty("UserId")!, certificatesTableMapping);

            var deviceDb = FindEntityType("Models.DeviceDb")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            deviceDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var modelsDeviceDbTableBase = new TableBase("Models.DeviceDb", null, relationalModel);
            var creationTimeColumnBase0 = new ColumnBase<ColumnMappingBase>("CreationTime", "timestamp with time zone", modelsDeviceDbTableBase);
            modelsDeviceDbTableBase.Columns.Add("CreationTime", creationTimeColumnBase0);
            var deviceIdColumnBase = new ColumnBase<ColumnMappingBase>("DeviceId", "character varying(256)", modelsDeviceDbTableBase);
            modelsDeviceDbTableBase.Columns.Add("DeviceId", deviceIdColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "bigint", modelsDeviceDbTableBase);
            modelsDeviceDbTableBase.Columns.Add("Id", idColumnBase0);
            var modifiedByIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedById", "bigint", modelsDeviceDbTableBase)
            {
                IsNullable = true
            };
            modelsDeviceDbTableBase.Columns.Add("ModifiedById", modifiedByIdColumnBase0);
            var modifiedTimeColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedTime", "timestamp with time zone", modelsDeviceDbTableBase)
            {
                IsNullable = true
            };
            modelsDeviceDbTableBase.Columns.Add("ModifiedTime", modifiedTimeColumnBase0);
            var notificationTokenColumnBase = new ColumnBase<ColumnMappingBase>("NotificationToken", "character varying(1024)", modelsDeviceDbTableBase)
            {
                IsNullable = true
            };
            modelsDeviceDbTableBase.Columns.Add("NotificationToken", notificationTokenColumnBase);
            var platformColumnBase = new ColumnBase<ColumnMappingBase>("Platform", "character varying(256)", modelsDeviceDbTableBase)
            {
                IsNullable = true
            };
            modelsDeviceDbTableBase.Columns.Add("Platform", platformColumnBase);
            relationalModel.DefaultTables.Add("Models.DeviceDb", modelsDeviceDbTableBase);
            var modelsDeviceDbMappingBase = new TableMappingBase<ColumnMappingBase>(deviceDb, modelsDeviceDbTableBase, true);
            modelsDeviceDbTableBase.AddTypeMapping(modelsDeviceDbMappingBase, false);
            defaultTableMappings2.Add(modelsDeviceDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, deviceDb.FindProperty("Id")!, modelsDeviceDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationTimeColumnBase0, deviceDb.FindProperty("CreationTime")!, modelsDeviceDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deviceIdColumnBase, deviceDb.FindProperty("DeviceId")!, modelsDeviceDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByIdColumnBase0, deviceDb.FindProperty("ModifiedById")!, modelsDeviceDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedTimeColumnBase0, deviceDb.FindProperty("ModifiedTime")!, modelsDeviceDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)notificationTokenColumnBase, deviceDb.FindProperty("NotificationToken")!, modelsDeviceDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)platformColumnBase, deviceDb.FindProperty("Platform")!, modelsDeviceDbMappingBase);

            var tableMappings2 = new List<TableMapping>();
            deviceDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var devicesTable = new Table("Devices", null, relationalModel);
            var idColumn0 = new Column("Id", "bigint", devicesTable);
            devicesTable.Columns.Add("Id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var creationTimeColumn0 = new Column("CreationTime", "timestamp with time zone", devicesTable);
            devicesTable.Columns.Add("CreationTime", creationTimeColumn0);
            var deviceIdColumn = new Column("DeviceId", "character varying(256)", devicesTable);
            devicesTable.Columns.Add("DeviceId", deviceIdColumn);
            var modifiedByIdColumn0 = new Column("ModifiedById", "bigint", devicesTable)
            {
                IsNullable = true
            };
            devicesTable.Columns.Add("ModifiedById", modifiedByIdColumn0);
            var modifiedTimeColumn0 = new Column("ModifiedTime", "timestamp with time zone", devicesTable)
            {
                IsNullable = true
            };
            devicesTable.Columns.Add("ModifiedTime", modifiedTimeColumn0);
            var notificationTokenColumn = new Column("NotificationToken", "character varying(1024)", devicesTable)
            {
                IsNullable = true
            };
            devicesTable.Columns.Add("NotificationToken", notificationTokenColumn);
            var platformColumn = new Column("Platform", "character varying(256)", devicesTable)
            {
                IsNullable = true
            };
            devicesTable.Columns.Add("Platform", platformColumn);
            var pK_Devices = new UniqueConstraint("PK_Devices", devicesTable, new[] { idColumn0 });
            devicesTable.PrimaryKey = pK_Devices;
            var pK_DevicesUc = RelationalModel.GetKey(this,
                "Models.DeviceDb",
                new[] { "Id" });
            pK_Devices.MappedKeys.Add(pK_DevicesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DevicesUc).Add(pK_Devices);
            devicesTable.UniqueConstraints.Add("PK_Devices", pK_Devices);
            var iX_Devices_DeviceId_Platform = new TableIndex(
            "IX_Devices_DeviceId_Platform", devicesTable, new[] { deviceIdColumn, platformColumn }, true);
            var iX_Devices_DeviceId_PlatformIx = RelationalModel.GetIndex(this,
                "Models.DeviceDb",
                "IX_Devices_DeviceId_Platform");
            iX_Devices_DeviceId_Platform.MappedIndexes.Add(iX_Devices_DeviceId_PlatformIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Devices_DeviceId_PlatformIx).Add(iX_Devices_DeviceId_Platform);
            devicesTable.Indexes.Add("IX_Devices_DeviceId_Platform", iX_Devices_DeviceId_Platform);
            var iX_Devices_ModifiedById = new TableIndex(
            "IX_Devices_ModifiedById", devicesTable, new[] { modifiedByIdColumn0 }, false);
            var iX_Devices_ModifiedByIdIx = RelationalModel.GetIndex(this,
                "Models.DeviceDb",
                "IX_Devices_ModifiedById");
            iX_Devices_ModifiedById.MappedIndexes.Add(iX_Devices_ModifiedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Devices_ModifiedByIdIx).Add(iX_Devices_ModifiedById);
            devicesTable.Indexes.Add("IX_Devices_ModifiedById", iX_Devices_ModifiedById);
            var iX_Devices_NotificationToken = new TableIndex(
            "IX_Devices_NotificationToken", devicesTable, new[] { notificationTokenColumn }, true);
            var iX_Devices_NotificationTokenIx = RelationalModel.GetIndex(this,
                "Models.DeviceDb",
                "IX_Devices_NotificationToken");
            iX_Devices_NotificationToken.MappedIndexes.Add(iX_Devices_NotificationTokenIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Devices_NotificationTokenIx).Add(iX_Devices_NotificationToken);
            devicesTable.Indexes.Add("IX_Devices_NotificationToken", iX_Devices_NotificationToken);
            relationalModel.Tables.Add(("Devices", null), devicesTable);
            var devicesTableMapping = new TableMapping(deviceDb, devicesTable, true);
            devicesTable.AddTypeMapping(devicesTableMapping, false);
            tableMappings2.Add(devicesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, deviceDb.FindProperty("Id")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(creationTimeColumn0, deviceDb.FindProperty("CreationTime")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(deviceIdColumn, deviceDb.FindProperty("DeviceId")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByIdColumn0, deviceDb.FindProperty("ModifiedById")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(modifiedTimeColumn0, deviceDb.FindProperty("ModifiedTime")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(notificationTokenColumn, deviceDb.FindProperty("NotificationToken")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(platformColumn, deviceDb.FindProperty("Platform")!, devicesTableMapping);

            var simpleSessionDb = FindEntityType("Models.SimpleSessionDb")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            simpleSessionDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var modelsSimpleSessionDbTableBase = new TableBase("Models.SimpleSessionDb", null, relationalModel);
            var creationTimeColumnBase1 = new ColumnBase<ColumnMappingBase>("CreationTime", "timestamp with time zone", modelsSimpleSessionDbTableBase);
            modelsSimpleSessionDbTableBase.Columns.Add("CreationTime", creationTimeColumnBase1);
            var expirationTimeColumnBase = new ColumnBase<ColumnMappingBase>("ExpirationTime", "timestamp with time zone", modelsSimpleSessionDbTableBase);
            modelsSimpleSessionDbTableBase.Columns.Add("ExpirationTime", expirationTimeColumnBase);
            var guidColumnBase = new ColumnBase<ColumnMappingBase>("Guid", "uuid", modelsSimpleSessionDbTableBase);
            modelsSimpleSessionDbTableBase.Columns.Add("Guid", guidColumnBase);
            var modifiedByIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedById", "bigint", modelsSimpleSessionDbTableBase)
            {
                IsNullable = true
            };
            modelsSimpleSessionDbTableBase.Columns.Add("ModifiedById", modifiedByIdColumnBase1);
            var modifiedTimeColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedTime", "timestamp with time zone", modelsSimpleSessionDbTableBase)
            {
                IsNullable = true
            };
            modelsSimpleSessionDbTableBase.Columns.Add("ModifiedTime", modifiedTimeColumnBase1);
            var signedHashNewColumnBase = new ColumnBase<ColumnMappingBase>("SignedHashNew", "character varying(1024)", modelsSimpleSessionDbTableBase)
            {
                IsNullable = true
            };
            modelsSimpleSessionDbTableBase.Columns.Add("SignedHashNew", signedHashNewColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("Status", "integer", modelsSimpleSessionDbTableBase)
            {
                IsNullable = true
            };
            modelsSimpleSessionDbTableBase.Columns.Add("Status", statusColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", modelsSimpleSessionDbTableBase);
            modelsSimpleSessionDbTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("Models.SimpleSessionDb", modelsSimpleSessionDbTableBase);
            var modelsSimpleSessionDbMappingBase = new TableMappingBase<ColumnMappingBase>(simpleSessionDb, modelsSimpleSessionDbTableBase, true);
            modelsSimpleSessionDbTableBase.AddTypeMapping(modelsSimpleSessionDbMappingBase, false);
            defaultTableMappings3.Add(modelsSimpleSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guidColumnBase, simpleSessionDb.FindProperty("Guid")!, modelsSimpleSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationTimeColumnBase1, simpleSessionDb.FindProperty("CreationTime")!, modelsSimpleSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expirationTimeColumnBase, simpleSessionDb.FindProperty("ExpirationTime")!, modelsSimpleSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByIdColumnBase1, simpleSessionDb.FindProperty("ModifiedById")!, modelsSimpleSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedTimeColumnBase1, simpleSessionDb.FindProperty("ModifiedTime")!, modelsSimpleSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)signedHashNewColumnBase, simpleSessionDb.FindProperty("SignedHashNew")!, modelsSimpleSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, simpleSessionDb.FindProperty("Status")!, modelsSimpleSessionDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, simpleSessionDb.FindProperty("UserId")!, modelsSimpleSessionDbMappingBase);

            var tableMappings3 = new List<TableMapping>();
            simpleSessionDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var sessionsTable = new Table("Sessions", null, relationalModel);
            var guidColumn = new Column("Guid", "uuid", sessionsTable);
            sessionsTable.Columns.Add("Guid", guidColumn);
            var creationTimeColumn1 = new Column("CreationTime", "timestamp with time zone", sessionsTable);
            sessionsTable.Columns.Add("CreationTime", creationTimeColumn1);
            var expirationTimeColumn = new Column("ExpirationTime", "timestamp with time zone", sessionsTable);
            sessionsTable.Columns.Add("ExpirationTime", expirationTimeColumn);
            var modifiedByIdColumn1 = new Column("ModifiedById", "bigint", sessionsTable)
            {
                IsNullable = true
            };
            sessionsTable.Columns.Add("ModifiedById", modifiedByIdColumn1);
            var modifiedTimeColumn1 = new Column("ModifiedTime", "timestamp with time zone", sessionsTable)
            {
                IsNullable = true
            };
            sessionsTable.Columns.Add("ModifiedTime", modifiedTimeColumn1);
            var signedHashNewColumn = new Column("SignedHashNew", "character varying(1024)", sessionsTable)
            {
                IsNullable = true
            };
            sessionsTable.Columns.Add("SignedHashNew", signedHashNewColumn);
            var statusColumn = new Column("Status", "integer", sessionsTable)
            {
                IsNullable = true
            };
            sessionsTable.Columns.Add("Status", statusColumn);
            var userIdColumn0 = new Column("UserId", "bigint", sessionsTable);
            sessionsTable.Columns.Add("UserId", userIdColumn0);
            var pK_Sessions = new UniqueConstraint("PK_Sessions", sessionsTable, new[] { guidColumn });
            sessionsTable.PrimaryKey = pK_Sessions;
            var pK_SessionsUc = RelationalModel.GetKey(this,
                "Models.SimpleSessionDb",
                new[] { "Guid" });
            pK_Sessions.MappedKeys.Add(pK_SessionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SessionsUc).Add(pK_Sessions);
            sessionsTable.UniqueConstraints.Add("PK_Sessions", pK_Sessions);
            var iX_Sessions_CreationTime = new TableIndex(
            "IX_Sessions_CreationTime", sessionsTable, new[] { creationTimeColumn1 }, false);
            var iX_Sessions_CreationTimeIx = RelationalModel.GetIndex(this,
                "Models.SimpleSessionDb",
                "IX_Sessions_CreationTime");
            iX_Sessions_CreationTime.MappedIndexes.Add(iX_Sessions_CreationTimeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sessions_CreationTimeIx).Add(iX_Sessions_CreationTime);
            sessionsTable.Indexes.Add("IX_Sessions_CreationTime", iX_Sessions_CreationTime);
            var iX_Sessions_ModifiedById = new TableIndex(
            "IX_Sessions_ModifiedById", sessionsTable, new[] { modifiedByIdColumn1 }, false);
            var iX_Sessions_ModifiedByIdIx = RelationalModel.GetIndex(this,
                "Models.SimpleSessionDb",
                "IX_Sessions_ModifiedById");
            iX_Sessions_ModifiedById.MappedIndexes.Add(iX_Sessions_ModifiedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sessions_ModifiedByIdIx).Add(iX_Sessions_ModifiedById);
            sessionsTable.Indexes.Add("IX_Sessions_ModifiedById", iX_Sessions_ModifiedById);
            var iX_Sessions_Status = new TableIndex(
            "IX_Sessions_Status", sessionsTable, new[] { statusColumn }, false);
            var iX_Sessions_StatusIx = RelationalModel.GetIndex(this,
                "Models.SimpleSessionDb",
                "IX_Sessions_Status");
            iX_Sessions_Status.MappedIndexes.Add(iX_Sessions_StatusIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sessions_StatusIx).Add(iX_Sessions_Status);
            sessionsTable.Indexes.Add("IX_Sessions_Status", iX_Sessions_Status);
            var iX_Sessions_UserId = new TableIndex(
            "IX_Sessions_UserId", sessionsTable, new[] { userIdColumn0 }, false);
            var iX_Sessions_UserIdIx = RelationalModel.GetIndex(this,
                "Models.SimpleSessionDb",
                "IX_Sessions_UserId");
            iX_Sessions_UserId.MappedIndexes.Add(iX_Sessions_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sessions_UserIdIx).Add(iX_Sessions_UserId);
            sessionsTable.Indexes.Add("IX_Sessions_UserId", iX_Sessions_UserId);
            relationalModel.Tables.Add(("Sessions", null), sessionsTable);
            var sessionsTableMapping = new TableMapping(simpleSessionDb, sessionsTable, true);
            sessionsTable.AddTypeMapping(sessionsTableMapping, false);
            tableMappings3.Add(sessionsTableMapping);
            RelationalModel.CreateColumnMapping(guidColumn, simpleSessionDb.FindProperty("Guid")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(creationTimeColumn1, simpleSessionDb.FindProperty("CreationTime")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(expirationTimeColumn, simpleSessionDb.FindProperty("ExpirationTime")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByIdColumn1, simpleSessionDb.FindProperty("ModifiedById")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedTimeColumn1, simpleSessionDb.FindProperty("ModifiedTime")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(signedHashNewColumn, simpleSessionDb.FindProperty("SignedHashNew")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, simpleSessionDb.FindProperty("Status")!, sessionsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, simpleSessionDb.FindProperty("UserId")!, sessionsTableMapping);

            var userDb = FindEntityType("Models.UserDb")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            userDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var modelsUserDbTableBase = new TableBase("Models.UserDb", null, relationalModel);
            var creationTimeColumnBase2 = new ColumnBase<ColumnMappingBase>("CreationTime", "timestamp with time zone", modelsUserDbTableBase);
            modelsUserDbTableBase.Columns.Add("CreationTime", creationTimeColumnBase2);
            var deviceIdColumnBase0 = new ColumnBase<ColumnMappingBase>("DeviceId", "bigint", modelsUserDbTableBase)
            {
                IsNullable = true
            };
            modelsUserDbTableBase.Columns.Add("DeviceId", deviceIdColumnBase0);
            var emailHashColumnBase = new ColumnBase<ColumnMappingBase>("EmailHash", "character varying(256)", modelsUserDbTableBase)
            {
                IsNullable = true
            };
            modelsUserDbTableBase.Columns.Add("EmailHash", emailHashColumnBase);
            var guidColumnBase0 = new ColumnBase<ColumnMappingBase>("Guid", "uuid", modelsUserDbTableBase);
            modelsUserDbTableBase.Columns.Add("Guid", guidColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "bigint", modelsUserDbTableBase);
            modelsUserDbTableBase.Columns.Add("Id", idColumnBase1);
            var modifiedByIdColumnBase2 = new ColumnBase<ColumnMappingBase>("ModifiedById", "bigint", modelsUserDbTableBase)
            {
                IsNullable = true
            };
            modelsUserDbTableBase.Columns.Add("ModifiedById", modifiedByIdColumnBase2);
            var modifiedTimeColumnBase2 = new ColumnBase<ColumnMappingBase>("ModifiedTime", "timestamp with time zone", modelsUserDbTableBase)
            {
                IsNullable = true
            };
            modelsUserDbTableBase.Columns.Add("ModifiedTime", modifiedTimeColumnBase2);
            relationalModel.DefaultTables.Add("Models.UserDb", modelsUserDbTableBase);
            var modelsUserDbMappingBase = new TableMappingBase<ColumnMappingBase>(userDb, modelsUserDbTableBase, true);
            modelsUserDbTableBase.AddTypeMapping(modelsUserDbMappingBase, false);
            defaultTableMappings4.Add(modelsUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, userDb.FindProperty("Id")!, modelsUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationTimeColumnBase2, userDb.FindProperty("CreationTime")!, modelsUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deviceIdColumnBase0, userDb.FindProperty("DeviceId")!, modelsUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailHashColumnBase, userDb.FindProperty("EmailHash")!, modelsUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guidColumnBase0, userDb.FindProperty("Guid")!, modelsUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByIdColumnBase2, userDb.FindProperty("ModifiedById")!, modelsUserDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedTimeColumnBase2, userDb.FindProperty("ModifiedTime")!, modelsUserDbMappingBase);

            var tableMappings4 = new List<TableMapping>();
            userDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn1 = new Column("Id", "bigint", usersTable);
            usersTable.Columns.Add("Id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var creationTimeColumn2 = new Column("CreationTime", "timestamp with time zone", usersTable);
            usersTable.Columns.Add("CreationTime", creationTimeColumn2);
            var deviceIdColumn0 = new Column("DeviceId", "bigint", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("DeviceId", deviceIdColumn0);
            var emailHashColumn = new Column("EmailHash", "character varying(256)", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("EmailHash", emailHashColumn);
            var guidColumn0 = new Column("Guid", "uuid", usersTable);
            usersTable.Columns.Add("Guid", guidColumn0);
            var modifiedByIdColumn2 = new Column("ModifiedById", "bigint", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("ModifiedById", modifiedByIdColumn2);
            var modifiedTimeColumn2 = new Column("ModifiedTime", "timestamp with time zone", usersTable)
            {
                IsNullable = true
            };
            usersTable.Columns.Add("ModifiedTime", modifiedTimeColumn2);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn1 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "Models.UserDb",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            var iX_Users_DeviceId = new TableIndex(
            "IX_Users_DeviceId", usersTable, new[] { deviceIdColumn0 }, false);
            var iX_Users_DeviceIdIx = RelationalModel.GetIndex(this,
                "Models.UserDb",
                "IX_Users_DeviceId");
            iX_Users_DeviceId.MappedIndexes.Add(iX_Users_DeviceIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Users_DeviceIdIx).Add(iX_Users_DeviceId);
            usersTable.Indexes.Add("IX_Users_DeviceId", iX_Users_DeviceId);
            var iX_Users_EmailHash = new TableIndex(
            "IX_Users_EmailHash", usersTable, new[] { emailHashColumn }, true);
            var iX_Users_EmailHashIx = RelationalModel.GetIndex(this,
                "Models.UserDb",
                "IX_Users_EmailHash");
            iX_Users_EmailHash.MappedIndexes.Add(iX_Users_EmailHashIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Users_EmailHashIx).Add(iX_Users_EmailHash);
            usersTable.Indexes.Add("IX_Users_EmailHash", iX_Users_EmailHash);
            var iX_Users_Guid = new TableIndex(
            "IX_Users_Guid", usersTable, new[] { guidColumn0 }, true);
            var iX_Users_GuidIx = RelationalModel.GetIndex(this,
                "Models.UserDb",
                "IX_Users_Guid");
            iX_Users_Guid.MappedIndexes.Add(iX_Users_GuidIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Users_GuidIx).Add(iX_Users_Guid);
            usersTable.Indexes.Add("IX_Users_Guid", iX_Users_Guid);
            var iX_Users_ModifiedById = new TableIndex(
            "IX_Users_ModifiedById", usersTable, new[] { modifiedByIdColumn2 }, false);
            var iX_Users_ModifiedByIdIx = RelationalModel.GetIndex(this,
                "Models.UserDb",
                "IX_Users_ModifiedById");
            iX_Users_ModifiedById.MappedIndexes.Add(iX_Users_ModifiedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Users_ModifiedByIdIx).Add(iX_Users_ModifiedById);
            usersTable.Indexes.Add("IX_Users_ModifiedById", iX_Users_ModifiedById);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(userDb, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings4.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, userDb.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(creationTimeColumn2, userDb.FindProperty("CreationTime")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(deviceIdColumn0, userDb.FindProperty("DeviceId")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(emailHashColumn, userDb.FindProperty("EmailHash")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(guidColumn0, userDb.FindProperty("Guid")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByIdColumn2, userDb.FindProperty("ModifiedById")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedTimeColumn2, userDb.FindProperty("ModifiedTime")!, usersTableMapping);

            var userInvitationDb = FindEntityType("Models.UserInvitationDb")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            userInvitationDb.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var modelsUserInvitationDbTableBase = new TableBase("Models.UserInvitationDb", null, relationalModel);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("Code", "character varying(10)", modelsUserInvitationDbTableBase)
            {
                IsNullable = true
            };
            modelsUserInvitationDbTableBase.Columns.Add("Code", codeColumnBase);
            var creationTimeColumnBase3 = new ColumnBase<ColumnMappingBase>("CreationTime", "timestamp with time zone", modelsUserInvitationDbTableBase);
            modelsUserInvitationDbTableBase.Columns.Add("CreationTime", creationTimeColumnBase3);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "bigint", modelsUserInvitationDbTableBase);
            modelsUserInvitationDbTableBase.Columns.Add("Id", idColumnBase2);
            var isConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("IsConfirmed", "boolean", modelsUserInvitationDbTableBase);
            modelsUserInvitationDbTableBase.Columns.Add("IsConfirmed", isConfirmedColumnBase);
            var modifiedByIdColumnBase3 = new ColumnBase<ColumnMappingBase>("ModifiedById", "bigint", modelsUserInvitationDbTableBase)
            {
                IsNullable = true
            };
            modelsUserInvitationDbTableBase.Columns.Add("ModifiedById", modifiedByIdColumnBase3);
            var modifiedTimeColumnBase3 = new ColumnBase<ColumnMappingBase>("ModifiedTime", "timestamp with time zone", modelsUserInvitationDbTableBase)
            {
                IsNullable = true
            };
            modelsUserInvitationDbTableBase.Columns.Add("ModifiedTime", modifiedTimeColumnBase3);
            var tryCountColumnBase = new ColumnBase<ColumnMappingBase>("TryCount", "integer", modelsUserInvitationDbTableBase)
            {
                IsNullable = true
            };
            modelsUserInvitationDbTableBase.Columns.Add("TryCount", tryCountColumnBase);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", modelsUserInvitationDbTableBase);
            modelsUserInvitationDbTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("Models.UserInvitationDb", modelsUserInvitationDbTableBase);
            var modelsUserInvitationDbMappingBase = new TableMappingBase<ColumnMappingBase>(userInvitationDb, modelsUserInvitationDbTableBase, true);
            modelsUserInvitationDbTableBase.AddTypeMapping(modelsUserInvitationDbMappingBase, false);
            defaultTableMappings5.Add(modelsUserInvitationDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, userInvitationDb.FindProperty("Id")!, modelsUserInvitationDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, userInvitationDb.FindProperty("Code")!, modelsUserInvitationDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationTimeColumnBase3, userInvitationDb.FindProperty("CreationTime")!, modelsUserInvitationDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isConfirmedColumnBase, userInvitationDb.FindProperty("IsConfirmed")!, modelsUserInvitationDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByIdColumnBase3, userInvitationDb.FindProperty("ModifiedById")!, modelsUserInvitationDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedTimeColumnBase3, userInvitationDb.FindProperty("ModifiedTime")!, modelsUserInvitationDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tryCountColumnBase, userInvitationDb.FindProperty("TryCount")!, modelsUserInvitationDbMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, userInvitationDb.FindProperty("UserId")!, modelsUserInvitationDbMappingBase);

            var tableMappings5 = new List<TableMapping>();
            userInvitationDb.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var invitationsTable = new Table("Invitations", null, relationalModel);
            var idColumn2 = new Column("Id", "bigint", invitationsTable);
            invitationsTable.Columns.Add("Id", idColumn2);
            idColumn2.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var codeColumn = new Column("Code", "character varying(10)", invitationsTable)
            {
                IsNullable = true
            };
            invitationsTable.Columns.Add("Code", codeColumn);
            var creationTimeColumn3 = new Column("CreationTime", "timestamp with time zone", invitationsTable);
            invitationsTable.Columns.Add("CreationTime", creationTimeColumn3);
            var isConfirmedColumn = new Column("IsConfirmed", "boolean", invitationsTable);
            invitationsTable.Columns.Add("IsConfirmed", isConfirmedColumn);
            var modifiedByIdColumn3 = new Column("ModifiedById", "bigint", invitationsTable)
            {
                IsNullable = true
            };
            invitationsTable.Columns.Add("ModifiedById", modifiedByIdColumn3);
            var modifiedTimeColumn3 = new Column("ModifiedTime", "timestamp with time zone", invitationsTable)
            {
                IsNullable = true
            };
            invitationsTable.Columns.Add("ModifiedTime", modifiedTimeColumn3);
            var tryCountColumn = new Column("TryCount", "integer", invitationsTable)
            {
                IsNullable = true
            };
            invitationsTable.Columns.Add("TryCount", tryCountColumn);
            var userIdColumn1 = new Column("UserId", "bigint", invitationsTable);
            invitationsTable.Columns.Add("UserId", userIdColumn1);
            var pK_Invitations = new UniqueConstraint("PK_Invitations", invitationsTable, new[] { idColumn2 });
            invitationsTable.PrimaryKey = pK_Invitations;
            var pK_InvitationsUc = RelationalModel.GetKey(this,
                "Models.UserInvitationDb",
                new[] { "Id" });
            pK_Invitations.MappedKeys.Add(pK_InvitationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_InvitationsUc).Add(pK_Invitations);
            invitationsTable.UniqueConstraints.Add("PK_Invitations", pK_Invitations);
            var iX_Invitations_ModifiedById = new TableIndex(
            "IX_Invitations_ModifiedById", invitationsTable, new[] { modifiedByIdColumn3 }, false);
            var iX_Invitations_ModifiedByIdIx = RelationalModel.GetIndex(this,
                "Models.UserInvitationDb",
                "IX_Invitations_ModifiedById");
            iX_Invitations_ModifiedById.MappedIndexes.Add(iX_Invitations_ModifiedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Invitations_ModifiedByIdIx).Add(iX_Invitations_ModifiedById);
            invitationsTable.Indexes.Add("IX_Invitations_ModifiedById", iX_Invitations_ModifiedById);
            var iX_Invitations_UserId = new TableIndex(
            "IX_Invitations_UserId", invitationsTable, new[] { userIdColumn1 }, false);
            var iX_Invitations_UserIdIx = RelationalModel.GetIndex(this,
                "Models.UserInvitationDb",
                "IX_Invitations_UserId");
            iX_Invitations_UserId.MappedIndexes.Add(iX_Invitations_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Invitations_UserIdIx).Add(iX_Invitations_UserId);
            invitationsTable.Indexes.Add("IX_Invitations_UserId", iX_Invitations_UserId);
            relationalModel.Tables.Add(("Invitations", null), invitationsTable);
            var invitationsTableMapping = new TableMapping(userInvitationDb, invitationsTable, true);
            invitationsTable.AddTypeMapping(invitationsTableMapping, false);
            tableMappings5.Add(invitationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, userInvitationDb.FindProperty("Id")!, invitationsTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, userInvitationDb.FindProperty("Code")!, invitationsTableMapping);
            RelationalModel.CreateColumnMapping(creationTimeColumn3, userInvitationDb.FindProperty("CreationTime")!, invitationsTableMapping);
            RelationalModel.CreateColumnMapping(isConfirmedColumn, userInvitationDb.FindProperty("IsConfirmed")!, invitationsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByIdColumn3, userInvitationDb.FindProperty("ModifiedById")!, invitationsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedTimeColumn3, userInvitationDb.FindProperty("ModifiedTime")!, invitationsTableMapping);
            RelationalModel.CreateColumnMapping(tryCountColumn, userInvitationDb.FindProperty("TryCount")!, invitationsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, userInvitationDb.FindProperty("UserId")!, invitationsTableMapping);
            var fK_Certificates_Certificates_ParentCertId = new ForeignKeyConstraint(
                "FK_Certificates_Certificates_ParentCertId", certificatesTable, certificatesTable,
                new[] { parentCertIdColumn },
                certificatesTable.FindUniqueConstraint("PK_Certificates")!, ReferentialAction.Restrict);
            var fK_Certificates_Certificates_ParentCertIdFk = RelationalModel.GetForeignKey(this,
                "Models.CertificateDb",
                new[] { "ParentCertId" },
                "Models.CertificateDb",
                new[] { "Thumbprint" });
            fK_Certificates_Certificates_ParentCertId.MappedForeignKeys.Add(fK_Certificates_Certificates_ParentCertIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Certificates_Certificates_ParentCertIdFk).Add(fK_Certificates_Certificates_ParentCertId);
            certificatesTable.ForeignKeyConstraints.Add(fK_Certificates_Certificates_ParentCertId);
            certificatesTable.ReferencingForeignKeyConstraints.Add(fK_Certificates_Certificates_ParentCertId);
            var fK_Certificates_Users_ModifiedById = new ForeignKeyConstraint(
                "FK_Certificates_Users_ModifiedById", certificatesTable, usersTable,
                new[] { modifiedByIdColumn },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Restrict);
            var fK_Certificates_Users_ModifiedByIdFk = RelationalModel.GetForeignKey(this,
                "Models.CertificateDb",
                new[] { "ModifiedById" },
                "Models.UserDb",
                new[] { "Id" });
            fK_Certificates_Users_ModifiedById.MappedForeignKeys.Add(fK_Certificates_Users_ModifiedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Certificates_Users_ModifiedByIdFk).Add(fK_Certificates_Users_ModifiedById);
            certificatesTable.ForeignKeyConstraints.Add(fK_Certificates_Users_ModifiedById);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Certificates_Users_ModifiedById);
            var fK_Certificates_Users_UserId = new ForeignKeyConstraint(
                "FK_Certificates_Users_UserId", certificatesTable, usersTable,
                new[] { userIdColumn },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_Certificates_Users_UserIdFk = RelationalModel.GetForeignKey(this,
                "Models.CertificateDb",
                new[] { "UserId" },
                "Models.UserDb",
                new[] { "Id" });
            fK_Certificates_Users_UserId.MappedForeignKeys.Add(fK_Certificates_Users_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Certificates_Users_UserIdFk).Add(fK_Certificates_Users_UserId);
            certificatesTable.ForeignKeyConstraints.Add(fK_Certificates_Users_UserId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Certificates_Users_UserId);
            var fK_Devices_Users_ModifiedById = new ForeignKeyConstraint(
                "FK_Devices_Users_ModifiedById", devicesTable, usersTable,
                new[] { modifiedByIdColumn0 },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Restrict);
            var fK_Devices_Users_ModifiedByIdFk = RelationalModel.GetForeignKey(this,
                "Models.DeviceDb",
                new[] { "ModifiedById" },
                "Models.UserDb",
                new[] { "Id" });
            fK_Devices_Users_ModifiedById.MappedForeignKeys.Add(fK_Devices_Users_ModifiedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Devices_Users_ModifiedByIdFk).Add(fK_Devices_Users_ModifiedById);
            devicesTable.ForeignKeyConstraints.Add(fK_Devices_Users_ModifiedById);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Devices_Users_ModifiedById);
            var fK_Invitations_Users_ModifiedById = new ForeignKeyConstraint(
                "FK_Invitations_Users_ModifiedById", invitationsTable, usersTable,
                new[] { modifiedByIdColumn3 },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Restrict);
            var fK_Invitations_Users_ModifiedByIdFk = RelationalModel.GetForeignKey(this,
                "Models.UserInvitationDb",
                new[] { "ModifiedById" },
                "Models.UserDb",
                new[] { "Id" });
            fK_Invitations_Users_ModifiedById.MappedForeignKeys.Add(fK_Invitations_Users_ModifiedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Invitations_Users_ModifiedByIdFk).Add(fK_Invitations_Users_ModifiedById);
            invitationsTable.ForeignKeyConstraints.Add(fK_Invitations_Users_ModifiedById);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Invitations_Users_ModifiedById);
            var fK_Invitations_Users_UserId = new ForeignKeyConstraint(
                "FK_Invitations_Users_UserId", invitationsTable, usersTable,
                new[] { userIdColumn1 },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_Invitations_Users_UserIdFk = RelationalModel.GetForeignKey(this,
                "Models.UserInvitationDb",
                new[] { "UserId" },
                "Models.UserDb",
                new[] { "Id" });
            fK_Invitations_Users_UserId.MappedForeignKeys.Add(fK_Invitations_Users_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Invitations_Users_UserIdFk).Add(fK_Invitations_Users_UserId);
            invitationsTable.ForeignKeyConstraints.Add(fK_Invitations_Users_UserId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Invitations_Users_UserId);
            var fK_Sessions_Users_ModifiedById = new ForeignKeyConstraint(
                "FK_Sessions_Users_ModifiedById", sessionsTable, usersTable,
                new[] { modifiedByIdColumn1 },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Restrict);
            var fK_Sessions_Users_ModifiedByIdFk = RelationalModel.GetForeignKey(this,
                "Models.SimpleSessionDb",
                new[] { "ModifiedById" },
                "Models.UserDb",
                new[] { "Id" });
            fK_Sessions_Users_ModifiedById.MappedForeignKeys.Add(fK_Sessions_Users_ModifiedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Sessions_Users_ModifiedByIdFk).Add(fK_Sessions_Users_ModifiedById);
            sessionsTable.ForeignKeyConstraints.Add(fK_Sessions_Users_ModifiedById);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Sessions_Users_ModifiedById);
            var fK_Sessions_Users_UserId = new ForeignKeyConstraint(
                "FK_Sessions_Users_UserId", sessionsTable, usersTable,
                new[] { userIdColumn0 },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_Sessions_Users_UserIdFk = RelationalModel.GetForeignKey(this,
                "Models.SimpleSessionDb",
                new[] { "UserId" },
                "Models.UserDb",
                new[] { "Id" });
            fK_Sessions_Users_UserId.MappedForeignKeys.Add(fK_Sessions_Users_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Sessions_Users_UserIdFk).Add(fK_Sessions_Users_UserId);
            sessionsTable.ForeignKeyConstraints.Add(fK_Sessions_Users_UserId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Sessions_Users_UserId);
            var fK_Users_Devices_DeviceId = new ForeignKeyConstraint(
                "FK_Users_Devices_DeviceId", usersTable, devicesTable,
                new[] { deviceIdColumn0 },
                devicesTable.FindUniqueConstraint("PK_Devices")!, ReferentialAction.Cascade);
            var fK_Users_Devices_DeviceIdFk = RelationalModel.GetForeignKey(this,
                "Models.UserDb",
                new[] { "DeviceId" },
                "Models.DeviceDb",
                new[] { "Id" });
            fK_Users_Devices_DeviceId.MappedForeignKeys.Add(fK_Users_Devices_DeviceIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Users_Devices_DeviceIdFk).Add(fK_Users_Devices_DeviceId);
            usersTable.ForeignKeyConstraints.Add(fK_Users_Devices_DeviceId);
            devicesTable.ReferencingForeignKeyConstraints.Add(fK_Users_Devices_DeviceId);
            var fK_Users_Users_ModifiedById = new ForeignKeyConstraint(
                "FK_Users_Users_ModifiedById", usersTable, usersTable,
                new[] { modifiedByIdColumn2 },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Restrict);
            var fK_Users_Users_ModifiedByIdFk = RelationalModel.GetForeignKey(this,
                "Models.UserDb",
                new[] { "ModifiedById" },
                "Models.UserDb",
                new[] { "Id" });
            fK_Users_Users_ModifiedById.MappedForeignKeys.Add(fK_Users_Users_ModifiedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Users_Users_ModifiedByIdFk).Add(fK_Users_Users_ModifiedById);
            usersTable.ForeignKeyConstraints.Add(fK_Users_Users_ModifiedById);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Users_Users_ModifiedById);
            return relationalModel.MakeReadOnly();
        }
    }
}
