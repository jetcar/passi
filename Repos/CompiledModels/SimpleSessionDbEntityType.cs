// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Repos.CompiledModels
{
    internal partial class SimpleSessionDbEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Models.SimpleSessionDb",
                typeof(SimpleSessionDb),
                baseEntityType);

            var guid = runtimeEntityType.AddProperty(
                "Guid",
                typeof(Guid),
                propertyInfo: typeof(SimpleSessionDb).GetProperty("Guid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SimpleSessionDb).GetField("<Guid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            guid.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uuid"));
            guid.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var creationTime = runtimeEntityType.AddProperty(
                "CreationTime",
                typeof(Instant),
                propertyInfo: typeof(BaseModel).GetProperty("CreationTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseModel).GetField("<CreationTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: NodaTime.Instant.FromUnixTimeTicks(0L));
            creationTime.TypeMapping = TimestampTzInstantMapping.Default.Clone(
                comparer: new ValueComparer<Instant>(
                    (Instant v1, Instant v2) => v1.Equals(v2),
                    (Instant v) => v.GetHashCode(),
                    (Instant v) => v),
                keyComparer: new ValueComparer<Instant>(
                    (Instant v1, Instant v2) => v1.Equals(v2),
                    (Instant v) => v.GetHashCode(),
                    (Instant v) => v),
                providerValueComparer: new ValueComparer<Instant>(
                    (Instant v1, Instant v2) => v1.Equals(v2),
                    (Instant v) => v.GetHashCode(),
                    (Instant v) => v));
            creationTime.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var expirationTime = runtimeEntityType.AddProperty(
                "ExpirationTime",
                typeof(Instant),
                propertyInfo: typeof(SimpleSessionDb).GetProperty("ExpirationTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SimpleSessionDb).GetField("<ExpirationTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: NodaTime.Instant.FromUnixTimeTicks(0L));
            expirationTime.TypeMapping = TimestampTzInstantMapping.Default.Clone(
                comparer: new ValueComparer<Instant>(
                    (Instant v1, Instant v2) => v1.Equals(v2),
                    (Instant v) => v.GetHashCode(),
                    (Instant v) => v),
                keyComparer: new ValueComparer<Instant>(
                    (Instant v1, Instant v2) => v1.Equals(v2),
                    (Instant v) => v.GetHashCode(),
                    (Instant v) => v),
                providerValueComparer: new ValueComparer<Instant>(
                    (Instant v1, Instant v2) => v1.Equals(v2),
                    (Instant v) => v.GetHashCode(),
                    (Instant v) => v));
            expirationTime.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var modifiedById = runtimeEntityType.AddProperty(
                "ModifiedById",
                typeof(long?),
                propertyInfo: typeof(BaseModel).GetProperty("ModifiedById", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseModel).GetField("<ModifiedById>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedById.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long?>(
                    (Nullable<long> v1, Nullable<long> v2) => v1.HasValue && v2.HasValue && (long)v1 == (long)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<long> v) => v.HasValue ? ((long)v).GetHashCode() : 0,
                    (Nullable<long> v) => v.HasValue ? (Nullable<long>)(long)v : default(Nullable<long>)),
                keyComparer: new ValueComparer<long?>(
                    (Nullable<long> v1, Nullable<long> v2) => v1.HasValue && v2.HasValue && (long)v1 == (long)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<long> v) => v.HasValue ? ((long)v).GetHashCode() : 0,
                    (Nullable<long> v) => v.HasValue ? (Nullable<long>)(long)v : default(Nullable<long>)),
                providerValueComparer: new ValueComparer<long?>(
                    (Nullable<long> v1, Nullable<long> v2) => v1.HasValue && v2.HasValue && (long)v1 == (long)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<long> v) => v.HasValue ? ((long)v).GetHashCode() : 0,
                    (Nullable<long> v) => v.HasValue ? (Nullable<long>)(long)v : default(Nullable<long>)));
            modifiedById.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var modifiedTime = runtimeEntityType.AddProperty(
                "ModifiedTime",
                typeof(Instant?),
                propertyInfo: typeof(BaseModel).GetProperty("ModifiedTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseModel).GetField("<ModifiedTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedTime.TypeMapping = TimestampTzInstantMapping.Default.Clone(
                comparer: new ValueComparer<Instant?>(
                    (Nullable<Instant> v1, Nullable<Instant> v2) => v1.HasValue && v2.HasValue && ((Instant)v1).Equals((Instant)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<Instant> v) => v.HasValue ? ((Instant)v).GetHashCode() : 0,
                    (Nullable<Instant> v) => v.HasValue ? (Nullable<Instant>)(Instant)v : default(Nullable<Instant>)),
                keyComparer: new ValueComparer<Instant?>(
                    (Nullable<Instant> v1, Nullable<Instant> v2) => v1.HasValue && v2.HasValue && ((Instant)v1).Equals((Instant)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<Instant> v) => v.HasValue ? ((Instant)v).GetHashCode() : 0,
                    (Nullable<Instant> v) => v.HasValue ? (Nullable<Instant>)(Instant)v : default(Nullable<Instant>)),
                providerValueComparer: new ValueComparer<Instant?>(
                    (Nullable<Instant> v1, Nullable<Instant> v2) => v1.HasValue && v2.HasValue && ((Instant)v1).Equals((Instant)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<Instant> v) => v.HasValue ? ((Instant)v).GetHashCode() : 0,
                    (Nullable<Instant> v) => v.HasValue ? (Nullable<Instant>)(Instant)v : default(Nullable<Instant>)));
            modifiedTime.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

            var signedHashNew = runtimeEntityType.AddProperty(
                "SignedHashNew",
                typeof(string),
                propertyInfo: typeof(SimpleSessionDb).GetProperty("SignedHashNew", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SimpleSessionDb).GetField("<SignedHashNew>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 1024);
            signedHashNew.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(1024)",
                    size: 1024));
            signedHashNew.TypeMapping = ((NpgsqlStringTypeMapping)signedHashNew.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        signedHashNew.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var status = runtimeEntityType.AddProperty(
            "Status",
            typeof(SessionStatus?),
            propertyInfo: typeof(SimpleSessionDb).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(SimpleSessionDb).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true);
        status.TypeMapping = IntTypeMapping.Default.Clone(
            comparer: new ValueComparer<SessionStatus?>(
                (Nullable<SessionStatus> v1, Nullable<SessionStatus> v2) => v1.HasValue && v2.HasValue && object.Equals((object)(SessionStatus)v1, (object)(SessionStatus)v2) || !v1.HasValue && !v2.HasValue,
                (Nullable<SessionStatus> v) => v.HasValue ? ((SessionStatus)v).GetHashCode() : 0,
                (Nullable<SessionStatus> v) => v.HasValue ? (Nullable<SessionStatus>)(SessionStatus)v : default(Nullable<SessionStatus>)),
            keyComparer: new ValueComparer<SessionStatus?>(
                (Nullable<SessionStatus> v1, Nullable<SessionStatus> v2) => v1.HasValue && v2.HasValue && object.Equals((object)(SessionStatus)v1, (object)(SessionStatus)v2) || !v1.HasValue && !v2.HasValue,
                (Nullable<SessionStatus> v) => v.HasValue ? ((SessionStatus)v).GetHashCode() : 0,
                (Nullable<SessionStatus> v) => v.HasValue ? (Nullable<SessionStatus>)(SessionStatus)v : default(Nullable<SessionStatus>)),
            providerValueComparer: new ValueComparer<int>(
                (int v1, int v2) => v1 == v2,
                (int v) => v,
                (int v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "integer"),
            converter: new ValueConverter<SessionStatus, int>(
                (SessionStatus value) => (int)value,
                (int value) => (SessionStatus)value),
            jsonValueReaderWriter: new JsonConvertedValueReaderWriter<SessionStatus, int>(
                JsonInt32ReaderWriter.Instance,
                new ValueConverter<SessionStatus, int>(
                    (SessionStatus value) => (int)value,
                    (int value) => (SessionStatus)value)));
        status.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var userId = runtimeEntityType.AddProperty(
            "UserId",
            typeof(long),
            propertyInfo: typeof(SimpleSessionDb).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(SimpleSessionDb).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            sentinel: 0L);
        userId.TypeMapping = LongTypeMapping.Default.Clone(
            comparer: new ValueComparer<long>(
                (long v1, long v2) => v1 == v2,
                (long v) => v.GetHashCode(),
                (long v) => v),
            keyComparer: new ValueComparer<long>(
                (long v1, long v2) => v1 == v2,
                (long v) => v.GetHashCode(),
                (long v) => v),
            providerValueComparer: new ValueComparer<long>(
                (long v1, long v2) => v1 == v2,
                (long v) => v.GetHashCode(),
                (long v) => v));
        userId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var key = runtimeEntityType.AddKey(
            new[] { guid });
        runtimeEntityType.SetPrimaryKey(key);

        var iX_Sessions_CreationTime = runtimeEntityType.AddIndex(
            new[] { creationTime },
            name: "IX_Sessions_CreationTime");

        var iX_Sessions_ModifiedById = runtimeEntityType.AddIndex(
            new[] { modifiedById },
            name: "IX_Sessions_ModifiedById");

        var iX_Sessions_Status = runtimeEntityType.AddIndex(
            new[] { status },
            name: "IX_Sessions_Status");

        var iX_Sessions_UserId = runtimeEntityType.AddIndex(
            new[] { userId },
            name: "IX_Sessions_UserId");

        return runtimeEntityType;
    }

    public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
    {
        var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModifiedById") },
            principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
            principalEntityType,
            deleteBehavior: DeleteBehavior.Restrict);

        var modifiedBy = declaringEntityType.AddNavigation("ModifiedBy",
            runtimeForeignKey,
            onDependent: true,
            typeof(UserDb),
            propertyInfo: typeof(BaseModel).GetProperty("ModifiedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(BaseModel).GetField("<ModifiedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

        var sessionModifiedBies = principalEntityType.AddNavigation("SessionModifiedBies",
            runtimeForeignKey,
            onDependent: false,
            typeof(ICollection<SimpleSessionDb>),
            propertyInfo: typeof(UserDb).GetProperty("SessionModifiedBies", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(UserDb).GetField("<SessionModifiedBies>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

        return runtimeForeignKey;
    }

    public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
    {
        var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UserId") },
            principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
            principalEntityType,
            deleteBehavior: DeleteBehavior.Cascade,
            required: true);

        var user = declaringEntityType.AddNavigation("User",
            runtimeForeignKey,
            onDependent: true,
            typeof(UserDb),
            propertyInfo: typeof(SimpleSessionDb).GetProperty("User", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(SimpleSessionDb).GetField("<User>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

        var sessionUsers = principalEntityType.AddNavigation("SessionUsers",
            runtimeForeignKey,
            onDependent: false,
            typeof(ICollection<SimpleSessionDb>),
            propertyInfo: typeof(UserDb).GetProperty("SessionUsers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(UserDb).GetField("<SessionUsers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

        return runtimeForeignKey;
    }

    public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
    {
        runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
        runtimeEntityType.AddAnnotation("Relational:Schema", null);
        runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
        runtimeEntityType.AddAnnotation("Relational:TableName", "Sessions");
        runtimeEntityType.AddAnnotation("Relational:ViewName", null);
        runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

        Customize(runtimeEntityType);
    }

    static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
